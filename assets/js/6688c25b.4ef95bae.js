"use strict";(self.webpackChunkthreader=self.webpackChunkthreader||[]).push([[703],{7866:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=r(5893),t=r(1151);const i={sidebar_position:3},d=void 0,s={id:"ThreadWorker",title:"ThreadWorker",description:"ThreadWorker is a simple class that is used within a ModuleScript",source:"@site/docs/ThreadWorker.md",sourceDirName:".",slug:"/ThreadWorker",permalink:"/Threader/docs/ThreadWorker",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Threader",permalink:"/Threader/docs/Threader"},next:{title:"Terrain generation",permalink:"/Threader/docs/Examples/Terrain generation"}},o={},l=[{value:"Promise",id:"promise",level:2},{value:"API",id:"api",level:2},{value:".new",id:"new",level:3},{value:":OnDispatch",id:"ondispatch",level:3},{value:":OnCancel",id:"oncancel",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["ThreadWorker is a simple class that is used within a ",(0,a.jsx)(n.em,{children:"ModuleScript"}),"\n(referenced as the ",(0,a.jsx)(n.strong,{children:"WorkerModule"}),") when passing it into the ",(0,a.jsx)(n.a,{href:"./Threader#new",children:"Threader.new()"})," constructor.\nThreadWorkers provide a 2-way communication between the thread and the\nmain thread while also processing the data on request. If required\nThreadWorkers can also be cancelled at any time."]}),"\n",(0,a.jsx)(n.h2,{id:"promise",children:"Promise"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"ThreadWorker.Promise = Promise\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Just like in the Threader class a Promise reference is passed into a ThreadWorker\nclass. Under the hood Threader uses the ",(0,a.jsx)(n.strong,{children:"ThreadWorker.Promise"})," reference when\nhandling ThreadWorkers."]}),"\n",(0,a.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,a.jsx)(n.h3,{id:"new",children:".new"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"ThreadWorker.new()\n"})}),"\n",(0,a.jsx)(n.p,{children:"Constructs a new ThreadWorker class."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- In a ModuleScript:\nlocal Threader = require(game:GetService("ReplicatedStorage").Threader)\n\n-- Will construct a new ThreadWorker that can be used in\n-- Threader.new\n-- highlight-next-line\nlocal SumWorker = Threader.ThreadWorker.new()\n\nreturn SumWorker\n'})}),"\n",(0,a.jsx)(n.h3,{id:"ondispatch",children:":OnDispatch"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"ThreadWorker:OnDispatch(data: any)\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"warning",children:(0,a.jsxs)(n.p,{children:["Calling ",(0,a.jsx)(n.code,{children:"Threader:Dispatch()"})," when no ",(0,a.jsx)(n.code,{children:":OnDispatch()"})," method was defined\nwill error with the following message: ",(0,a.jsxs)(n.em,{children:["ThreadWorkerClass",":OnDispatch","() must be overridden!"]})]})}),"\n",(0,a.jsxs)(n.p,{children:["Used to process the ",(0,a.jsx)(n.em,{children:"data"}),". Threader does not automatically desynchronize\nthe thread. Returning the processed data to the main thread is optional."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local Threader = require(game:GetService("ReplicatedStorage").Threader)\n\nlocal SumWorker = Threader.ThreadWorker.new()\n\n-- When dispatched will sum up all of the\n-- numbers found in the *data* table\n-- Required\n-- highlight-next-line\nfunction SumWorker:OnDispatch(data: { number })\n    task.desynchronize()\n\n    local summedNumber = 0\n\n    for _, num in data do\n        summedNumber += num\n    end\n\n    -- Will return the data that will be accessible\n    -- by the main thread\n    return summedNumber\nend\n\nreturn SumWorker\n'})}),"\n",(0,a.jsx)(n.h3,{id:"oncancel",children:":OnCancel"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"ThreadWorker:OnCancel()\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"warning",children:(0,a.jsxs)(n.p,{children:["Calling ",(0,a.jsx)(n.code,{children:"Threader:Cancel()"})," when no ",(0,a.jsx)(n.code,{children:":OnCancel()"})," method was defined\nwill warn with the following message: ",(0,a.jsxs)(n.em,{children:["Threader",":Cancel","() was called but the default method was not overridden!"]})]})}),"\n",(0,a.jsxs)(n.p,{children:["Optional method, called before the thread is cancelled by calling\n",(0,a.jsxs)(n.a,{href:"./Threader#cancel",children:["Threader",":Cancel","()"]}),". Useful to stop any loops on-going\nor disconnect from certain events."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local Threader = require(game:GetService("ReplicatedStorage").Threader)\n\nlocal SumWorker = Threader.ThreadWorker.new()\n\n-- Adding properties to a ThreadWorker is allowed\nSumWorker.isIterating = true\n\nfunction SumWorker:OnWork(data: { number })\n    task.desynchronize()\n\n    local summedNumber = 0\n\n    for _, num in data do\n        -- If isIterating equals false will return out\n        if not self.isIterating then\n            return\n        end\n\n        summedNumber += num\n    end\n\n    return summedNumber\nend\n\n-- When cancelled will set isIterating to false\n-- highlight-next-line\nfunction SumWorker:OnCancel()\n    self.isIterating = false\nend\n\nreturn SumWorker\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>s,a:()=>d});var a=r(7294);const t={},i=a.createContext(t);function d(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);